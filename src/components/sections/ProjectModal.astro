---
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import translations from "../../i18n";

interface Props {
	id: string;
	title: string;
	description: string;
	detailedDescription: string;
	technicalDescription: string;
	image: ImageMetadata;
	galleryImages?: ImageMetadata[];
	tags: string[];
	link?: string;
}

const {
	id,
	title,
	detailedDescription,
	technicalDescription,
	image,
	galleryImages = [],
	tags,
	link,
} = Astro.props;

const currentPath = Astro.url.pathname;
const lang = currentPath.split("/")[1] || "en";
const t = translations[lang as keyof typeof translations];
---

<div
	id={`modal-${id}`}
	class="fixed inset-0 z-50 hidden opacity-0 transition-opacity duration-300"
	role="dialog"
	aria-labelledby={`modal-title-${id}`}
	aria-modal="true"
>
	<div class="fixed inset-0 bg-black/50 transition-opacity"></div>

	<div class="fixed inset-0 z-10 overflow-y-auto">
		<div
			class="flex min-h-full items-center justify-center p-4 text-center sm:p-0"
		>
			<div
				class="modal-content relative w-full transform overflow-hidden bg-white dark:bg-dark-surface-header text-left shadow-xl transition-all sm:my-8 sm:max-w-4xl h-full sm:h-auto max-h-[100vh] sm:max-h-[90vh] sm:rounded-lg"
			>
				<!-- Close button -->
				<button
					type="button"
					class="modal-close fixed sm:absolute right-4 top-4 z-20 rounded-full bg-gray-100 dark:bg-gray-800 p-2.5 transition-colors hover:bg-gray-200 dark:hover:bg-gray-700 shadow-lg"
					aria-label="Close modal"
				>
					<svg
						class="h-6 w-6 text-gray-600 dark:text-gray-300"
						fill="none"
						viewBox="0 0 24 24"
						stroke-width="2"
						stroke="currentColor"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>

				<!-- Content wrapper -->
				<div class="max-h-[100vh] sm:max-h-[90vh] overflow-y-auto">
					<div
						class="sticky top-0 bg-white dark:bg-dark-surface-header z-10 p-6 border-b border-gray-200 dark:border-gray-700"
					>
						<h3
							class="text-3xl font-bold text-light-text-primary dark:text-dark-text-primary"
						>
							{title}
						</h3>
					</div>

					<!-- Main content -->
					<div class="space-y-6 p-6">
						<Image
							src={image}
							alt={title}
							width={1200}
							height={675}
							class="w-full h-auto rounded-lg"
						/>

						<div class="space-y-4">
							<h4
								class="text-xl font-semibold text-light-text-primary dark:text-dark-text-primary"
							>
								About the Project
							</h4>
							<p
								class="text-light-text-secondary dark:text-dark-text-secondary"
							>
								{t.projects[detailedDescription]}
							</p>
						</div>

						<div class="space-y-4">
							<h4
								class="text-xl font-semibold text-light-text-primary dark:text-dark-text-primary"
							>
								Technical Overview
							</h4>
							<p
								class="text-light-text-secondary dark:text-dark-text-secondary"
							>
								{t.projects[technicalDescription]}
							</p>
						</div>

						{
							galleryImages.length > 0 && (
								<div class="space-y-4">
									<h4 class="text-xl font-semibold text-light-text-primary dark:text-dark-text-primary">
										Gallery
									</h4>
									<div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
										{galleryImages.map((img, index) => (
											<Image
												src={img}
												alt={`${title} gallery image ${index + 1}`}
												width={600}
												height={400}
												class="w-full h-48 object-cover rounded-lg"
											/>
										))}
									</div>
								</div>
							)
						}

						<div class="flex flex-wrap gap-2">
							{
								tags.map((tag) => (
									<span class="px-3 py-1 text-sm font-medium border border-light-text-accent dark:border-dark-text-accent rounded-full text-light-text-primary dark:text-dark-text-primary">
										{tag}
									</span>
								))
							}
						</div>

						{
							link && (
								<a
									href={link}
									target="_blank"
									rel="noopener noreferrer"
									class="inline-flex items-center gap-2 px-6 py-3 bg-light-text-accent dark:bg-dark-text-accent text-white rounded-lg hover:opacity-90 transition-opacity"
								>
									Visit Website
									<svg
										class="w-4 h-4"
										viewBox="0 0 24 24"
										fill="none"
										stroke="currentColor"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
										/>
									</svg>
								</a>
							)
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<script>
	let activeModal: HTMLElement | null = null;

	function openModal(modalId: string) {
		const modal = document.getElementById(modalId);
		if (!modal) return;

		activeModal = modal;
		modal.classList.remove("hidden");
		// Ensure mobile scrolling is locked
		document.body.style.overflow = "hidden";
		// Use setTimeout to ensure opacity transition works
		setTimeout(() => modal.classList.remove("opacity-0"), 10);
	}

	function closeModal(modal: HTMLElement) {
		if (!modal) return;

		modal.classList.add("opacity-0");
		setTimeout(() => {
			modal.classList.add("hidden");
			document.body.style.overflow = "";
		}, 300);
		activeModal = null;
	}

	function initializeModals() {
		// Open modal buttons
		document.querySelectorAll('[id^="modal-open-"]').forEach((button) => {
			const id = button.id.replace("modal-open-", "");
			button.addEventListener("click", (e) => {
				e.stopPropagation();
				openModal(`modal-${id}`);
			});
		});

		// Close modal buttons
		document.querySelectorAll(".modal-close").forEach((button) => {
			button.addEventListener("click", (e) => {
				e.stopPropagation();
				const modal = (e.target as HTMLElement).closest('[id^="modal-"]');
				if (modal) closeModal(modal as HTMLElement);
			});
		});

		// Close on outside click (only for desktop)
		document.addEventListener("click", (e) => {
			if (
				activeModal &&
				!(e.target as HTMLElement).closest(".modal-content") &&
				window.innerWidth >= 640 // 640px is sm breakpoint
			) {
				closeModal(activeModal);
			}
		});

		// Close on escape key
		document.addEventListener("keydown", (e) => {
			if (e.key === "Escape" && activeModal) {
				closeModal(activeModal);
			}
		});
	}

	// Initialize on page load
	initializeModals();

	// Re-initialize when navigating between pages
	document.addEventListener("astro:page-load", initializeModals);

	// Handle resize events
	window.addEventListener("resize", () => {
		if (activeModal) {
			// Adjust modal positioning if needed
			const content = activeModal.querySelector(".modal-content");
			if (content) {
				content.classList.toggle("h-full", window.innerWidth < 640);
			}
		}
	});
</script>
