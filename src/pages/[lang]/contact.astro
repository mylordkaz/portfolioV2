---
import { Image } from "astro:assets";
import Layout from "../../layouts/Layout.astro";
import Header from "../../components/layout/Header.astro";
import Footer from "../../components/layout/Footer.astro";
import translations from "../../i18n";

export function getStaticPaths() {
	return [
		{ params: { lang: "en" } },
		{ params: { lang: "ja" } },
		{ params: { lang: "fr" } },
	];
}

const currentPath = Astro.url.pathname;
const lang = currentPath.split("/")[1] || "en";
const t = translations[lang as keyof typeof translations];
---

<Layout title={`${t.contact.title} - Kevin-Tim Portfolio`}>
	<Header />

	<!-- Hero Section -->
	<section
		class="bg-light-surface-hero dark:bg-dark-surface-hero min-h-[60vh] flex items-center"
	>
		<div class="container mx-auto px-4">
			<div class="max-w-3xl mx-auto text-center">
				<h1
					class="text-5xl font-bold text-light-text-primary dark:text-dark-text-primary mb-6"
				>
					{t.contact.title}
				</h1>
				<p
					class="text-xl text-light-text-secondary dark:text-dark-text-secondary"
				>
					{t.contact.description}
				</p>
			</div>
		</div>
	</section>

	<section class="bg-light-surface-main dark:bg-dark-surface-main py-20">
		<div class="container mx-auto px-4">
			<div class="max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-2 gap-12">
				<!-- Contact Form -->
				<div
					class="bg-white dark:bg-dark-surface-header p-8 rounded-lg shadow-lg"
				>
					<form
						class="space-y-6"
						name="contact"
						method="POST"
						data-netlify="true"
					>
						<!-- Add required hidden input for Netlify -->
						<input type="hidden" name="form-name" value="contact" />
						<div>
							<label
								for="name"
								class="block text-light-text-primary dark:text-dark-text-primary mb-2"
							>
								{t.contact.form.name}
							</label>
							<input
								type="text"
								id="name"
								name="name"
								required
								class="w-full px-4 py-2 rounded-lg border border-light-border-light dark:border-dark-border-light bg-light-surface-main dark:bg-dark-surface-main text-light-text-primary dark:text-dark-text-primary focus:outline-none focus:ring-2 focus:ring-light-text-accent dark:focus:ring-dark-text-accent"
							/>
						</div>
						<div>
							<label
								for="email"
								class="block text-light-text-primary dark:text-dark-text-primary mb-2"
							>
								{t.contact.form.email}
							</label>
							<input
								type="email"
								id="email"
								name="email"
								required
								class="w-full px-4 py-2 rounded-lg border border-light-border-light dark:border-dark-border-light bg-light-surface-main dark:bg-dark-surface-main text-light-text-primary dark:text-dark-text-primary focus:outline-none focus:ring-2 focus:ring-light-text-accent dark:focus:ring-dark-text-accent"
							/>
						</div>
						<div>
							<label
								for="message"
								class="block text-light-text-primary dark:text-dark-text-primary mb-2"
							>
								{t.contact.form.message}
							</label>
							<textarea
								id="message"
								name="message"
								required
								rows="4"
								class="w-full px-4 py-2 rounded-lg border border-light-border-light dark:border-dark-border-light bg-light-surface-main dark:bg-dark-surface-main text-light-text-primary dark:text-dark-text-primary focus:outline-none focus:ring-2 focus:ring-light-text-accent dark:focus:ring-dark-text-accent"
							></textarea>
						</div>
						<!-- Add success/error message display -->
						<div id="form-status" class="hidden">
							<p
								id="success-message"
								class="text-green-600 dark:text-green-400 hidden"
							>
								{t.contact.form.success}
							</p>
							<p
								id="error-message"
								class="text-red-600 dark:text-red-400 hidden"
							>
								{t.contact.form.error}
							</p>
						</div>
						<button
							type="submit"
							id="submit-button"
							class="w-full px-6 py-3 bg-light-text-accent dark:bg-dark-text-accent text-white rounded-lg hover:opacity-90 transition-opacity"
						>
							{t.contact.form.submit}
						</button>
					</form>
				</div>

				<!-- Social Links -->
				<div
					class="bg-white dark:bg-dark-surface-header p-8 rounded-lg shadow-lg"
				>
					<h2
						class="text-2xl font-bold text-light-text-primary dark:text-dark-text-primary mb-6"
					>
						{t.contact.socials.title}
					</h2>
					<p
						class="text-light-text-secondary dark:text-dark-text-secondary mb-8"
					>
						{t.contact.socials.description}
					</p>
					<div class="space-y-4">
						<a
							href="https://github.com/mylordkaz"
							target="_blank"
							rel="noopener noreferrer"
							class="flex items-center gap-4 p-4 rounded-lg hover:bg-light-hover-light dark:hover:bg-dark-hover-light transition-colors"
						>
							<svg
								class="w-6 h-6 text-light-text-primary dark:text-dark-text-primary"
								viewBox="0 0 24 24"
								fill="currentColor"
							>
								<path
									d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
								></path>
							</svg>
							<span class="text-light-text-primary dark:text-dark-text-primary"
								>GitHub</span
							>
						</a>
						<a
							href="https://linkedin.com/in/kevin-timsiline"
							target="_blank"
							rel="noopener noreferrer"
							class="flex items-center gap-4 p-4 rounded-lg hover:bg-light-hover-light dark:hover:bg-dark-hover-light transition-colors"
						>
							<svg
								class="w-6 h-6 text-light-text-primary dark:text-dark-text-primary"
								viewBox="0 0 24 24"
								fill="currentColor"
							>
								<path
									d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
								></path>
							</svg>
							<span class="text-light-text-primary dark:text-dark-text-primary"
								>LinkedIn</span
							>
						</a>
						<a
							href="mailto:timsiline.kevin@gmail.com"
							class="flex items-center gap-4
						p-4 rounded-lg hover:bg-light-hover-light
						dark:hover:bg-dark-hover-light transition-colors"
						>
							<svg
								class="w-6 h-6 text-light-text-primary dark:text-dark-text-primary"
								viewBox="0 0 24 24"
								fill="none"
								stroke="currentColor"
								stroke-width="2"
							>
								<path
									d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
								></path>
							</svg>
							<span class="text-light-text-primary dark:text-dark-text-primary"
								>Email</span
							>
						</a>
					</div>
				</div>
			</div>
		</div>
	</section>

	<Footer />
</Layout>

<script>
	const handleSubmit = async (event: Event) => {
		event.preventDefault();

		const form = event.target as HTMLFormElement;
		const submitButton = form.querySelector(
			"#submit-button",
		) as HTMLButtonElement;
		const formStatus = document.getElementById("form-status");
		const successMessage = document.getElementById("success-message");
		const errorMessage = document.getElementById("error-message");

		// Store original button text
		const originalButtonText = submitButton.innerHTML;

		try {
			// Disable button and show loading state
			submitButton.disabled = true;
			submitButton.innerHTML = "Sending...";

			// Submit the form data
			const response = await fetch(form.action, {
				method: "POST",
				body: new FormData(form),
			});

			if (response.ok) {
				// Show success message
				form.reset();
				formStatus?.classList.remove("hidden");
				successMessage?.classList.remove("hidden");
				errorMessage?.classList.add("hidden");

				// Hide success message after 5 seconds
				setTimeout(() => {
					formStatus?.classList.add("hidden");
					successMessage?.classList.add("hidden");
				}, 5000);
			} else {
				throw new Error("Form submission failed");
			}
		} catch (error) {
			// Show error message
			formStatus?.classList.remove("hidden");
			errorMessage?.classList.remove("hidden");
			successMessage?.classList.add("hidden");

			// Hide error message after 5 seconds
			setTimeout(() => {
				formStatus?.classList.add("hidden");
				errorMessage?.classList.add("hidden");
			}, 5000);
		} finally {
			// Reset button state
			submitButton.disabled = false;
			submitButton.innerHTML = originalButtonText;
		}
	};

	// Add form submission handler
	document
		.querySelector('form[name="contact"]')
		?.addEventListener("submit", handleSubmit);
</script>
